// Generated automatically by nearley, version 2.15.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

	var BigNumber = require('bignumber.js');
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "main", "symbols": ["_", "condition", "_"], "postprocess": function(d) {return d[1]; }},
    {"name": "dataFeedMatch$subexpression$1$string$1", "symbols": [{"literal":"d"}, {"literal":"a"}, {"literal":"t"}, {"literal":"a"}, {"literal":"_"}, {"literal":"f"}, {"literal":"e"}, {"literal":"e"}, {"literal":"d"}, {"literal":"["}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1", "symbols": []},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$ebnf$1", /[\,]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$1", "symbols": [{"literal":"o"}, {"literal":"r"}, {"literal":"a"}, {"literal":"c"}, {"literal":"l"}, {"literal":"e"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1", "symbols": ["dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$1"]},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$2", "symbols": [{"literal":"f"}, {"literal":"e"}, {"literal":"e"}, {"literal":"d"}, {"literal":"_"}, {"literal":"n"}, {"literal":"a"}, {"literal":"m"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1", "symbols": ["dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$2"]},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$3", "symbols": [{"literal":"m"}, {"literal":"c"}, {"literal":"i"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1", "symbols": ["dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$3"]},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$4", "symbols": [{"literal":"f"}, {"literal":"e"}, {"literal":"e"}, {"literal":"d"}, {"literal":"_"}, {"literal":"v"}, {"literal":"a"}, {"literal":"l"}, {"literal":"u"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1", "symbols": ["dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$4"]},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$5", "symbols": [{"literal":"i"}, {"literal":"f"}, {"literal":"s"}, {"literal":"e"}, {"literal":"v"}, {"literal":"e"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1", "symbols": ["dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$5"]},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$6", "symbols": [{"literal":"i"}, {"literal":"f"}, {"literal":"n"}, {"literal":"o"}, {"literal":"n"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1", "symbols": ["dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$6"]},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2$string$1", "symbols": [{"literal":"!"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2", "symbols": ["dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2$string$1"]},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2$string$2", "symbols": [{"literal":">"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2", "symbols": ["dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2$string$2"]},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2$string$3", "symbols": [{"literal":"<"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2", "symbols": ["dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2$string$3"]},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2", "symbols": [{"literal":">"}]},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2", "symbols": [{"literal":"<"}]},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2", "symbols": [{"literal":"="}]},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1", "symbols": ["dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "_", "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1", "_", "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2", "_", "valueInDF", "_"]},
    {"name": "dataFeedMatch$subexpression$1$ebnf$1", "symbols": ["dataFeedMatch$subexpression$1$ebnf$1", "dataFeedMatch$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "dataFeedMatch$subexpression$1", "symbols": ["dataFeedMatch$subexpression$1$string$1", "dataFeedMatch$subexpression$1$ebnf$1", {"literal":"]"}]},
    {"name": "dataFeedMatch", "symbols": ["dataFeedMatch$subexpression$1"], "postprocess": id},
    {"name": "inputAndOutputMatch$subexpression$1$subexpression$1$string$1", "symbols": [{"literal":"i"}, {"literal":"n"}, {"literal":"p"}, {"literal":"u"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "inputAndOutputMatch$subexpression$1$subexpression$1", "symbols": ["inputAndOutputMatch$subexpression$1$subexpression$1$string$1"]},
    {"name": "inputAndOutputMatch$subexpression$1$subexpression$1$string$2", "symbols": [{"literal":"o"}, {"literal":"u"}, {"literal":"t"}, {"literal":"p"}, {"literal":"u"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "inputAndOutputMatch$subexpression$1$subexpression$1", "symbols": ["inputAndOutputMatch$subexpression$1$subexpression$1$string$2"]},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1", "symbols": []},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$ebnf$1", /[\,]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$1", "symbols": [{"literal":"a"}, {"literal":"d"}, {"literal":"d"}, {"literal":"r"}, {"literal":"e"}, {"literal":"s"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1", "symbols": ["inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$1"]},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$2", "symbols": [{"literal":"a"}, {"literal":"m"}, {"literal":"o"}, {"literal":"u"}, {"literal":"n"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1", "symbols": ["inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$2"]},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$3", "symbols": [{"literal":"a"}, {"literal":"s"}, {"literal":"s"}, {"literal":"e"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1", "symbols": ["inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1$string$3"]},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2$string$1", "symbols": [{"literal":"!"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2", "symbols": ["inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2$string$1"]},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2$string$2", "symbols": [{"literal":">"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2", "symbols": ["inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2$string$2"]},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2$string$3", "symbols": [{"literal":"<"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2", "symbols": ["inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2$string$3"]},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2", "symbols": [{"literal":">"}]},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2", "symbols": [{"literal":"<"}]},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2", "symbols": [{"literal":"="}]},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1", "symbols": ["inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "_", "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$1", "_", "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1$subexpression$2", "_", "valueInIO", "_"]},
    {"name": "inputAndOutputMatch$subexpression$1$ebnf$1", "symbols": ["inputAndOutputMatch$subexpression$1$ebnf$1", "inputAndOutputMatch$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "inputAndOutputMatch$subexpression$1", "symbols": ["inputAndOutputMatch$subexpression$1$subexpression$1", {"literal":"["}, "inputAndOutputMatch$subexpression$1$ebnf$1", {"literal":"]"}]},
    {"name": "inputAndOutputMatch", "symbols": ["inputAndOutputMatch$subexpression$1"], "postprocess": id},
    {"name": "IFELSE", "symbols": ["_", "condition", "_", {"literal":"?"}, "_", "AS", "_", {"literal":":"}, "_", "AS"], "postprocess": function(d) {return ['ifelse', d[1], d[5], d[9]];}},
    {"name": "OR$string$1", "symbols": [{"literal":"|"}, {"literal":"|"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "OR", "symbols": ["condition2", "_", "OR$string$1", "_", "condition"], "postprocess": function(d) {return ['or', d[0], d[4]];}},
    {"name": "AND$string$1", "symbols": [{"literal":"&"}, {"literal":"&"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "AND", "symbols": ["condition2", "_", "AND$string$1", "_", "condition"], "postprocess": function(d) {return ['and', d[0], d[4]];}},
    {"name": "condition", "symbols": ["AS", "_", "conditional", "_", "AS"], "postprocess": function(d) {return ['condition', d[2], d[0], d[4]];}},
    {"name": "condition$string$1", "symbols": [{"literal":"="}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "condition", "symbols": ["string", "_", "condition$string$1", "_", "string"], "postprocess": function(d) {return ['stringCondition', '==', d[0], d[4]];}},
    {"name": "condition$string$2", "symbols": [{"literal":"!"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "condition", "symbols": ["string", "_", "condition$string$2", "_", "string"], "postprocess": function(d) {return ['stringCondition', '!=', d[0], d[4]];}},
    {"name": "condition", "symbols": ["AND"], "postprocess": id},
    {"name": "condition", "symbols": ["OR"], "postprocess": id},
    {"name": "condition", "symbols": ["AS"], "postprocess": id},
    {"name": "condition", "symbols": ["IFELSE"], "postprocess": id},
    {"name": "condition2", "symbols": ["AS", "_", "conditional", "_", "AS"], "postprocess": function(d) {return ['condition', d[2], d[0], d[4]];}},
    {"name": "condition2", "symbols": ["AS"], "postprocess": id},
    {"name": "conditionals$string$1", "symbols": [{"literal":"="}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "conditionals", "symbols": ["conditionals$string$1"]},
    {"name": "conditionals$string$2", "symbols": [{"literal":">"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "conditionals", "symbols": ["conditionals$string$2"]},
    {"name": "conditionals$string$3", "symbols": [{"literal":"<"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "conditionals", "symbols": ["conditionals$string$3"]},
    {"name": "conditionals$string$4", "symbols": [{"literal":"!"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "conditionals", "symbols": ["conditionals$string$4"]},
    {"name": "conditionals", "symbols": [{"literal":">"}]},
    {"name": "conditionals", "symbols": [{"literal":"<"}]},
    {"name": "conditional", "symbols": ["conditionals"], "postprocess": function(d) { return d[0][0] }},
    {"name": "P", "symbols": [{"literal":"("}, "_", "condition", "_", {"literal":")"}], "postprocess": function(d) {return d[2]; }},
    {"name": "P", "symbols": ["N"], "postprocess": id},
    {"name": "E", "symbols": ["P", "_", {"literal":"^"}, "_", "E"], "postprocess": function(d) {return ['^', d[0], d[4]]; }},
    {"name": "E", "symbols": ["P"], "postprocess": id},
    {"name": "MD", "symbols": ["MD", "_", {"literal":"*"}, "_", "E"], "postprocess": function(d) {return ['*', d[0], d[4]]; }},
    {"name": "MD", "symbols": ["MD", "_", {"literal":"/"}, "_", "E"], "postprocess": function(d) {return ['/', d[0], d[4]]; }},
    {"name": "MD", "symbols": ["E"], "postprocess": id},
    {"name": "AS", "symbols": ["AS", "_", {"literal":"+"}, "_", "MD"], "postprocess": function(d) {return ['+', d[0], d[4]]; }},
    {"name": "AS", "symbols": ["AS", "_", {"literal":"-"}, "_", "MD"], "postprocess": function(d) {return ['-', d[0], d[4]]; }},
    {"name": "AS", "symbols": ["MD"], "postprocess": id},
    {"name": "N", "symbols": ["float"], "postprocess": id},
    {"name": "N$string$1", "symbols": [{"literal":"s"}, {"literal":"i"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N", "symbols": ["N$string$1", "_", "P"], "postprocess": function(d) {return ['sin', d[2]]; }},
    {"name": "N$string$2", "symbols": [{"literal":"c"}, {"literal":"o"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N", "symbols": ["N$string$2", "_", "P"], "postprocess": function(d) {return ['cos', d[2]]; }},
    {"name": "N$string$3", "symbols": [{"literal":"t"}, {"literal":"a"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N", "symbols": ["N$string$3", "_", "P"], "postprocess": function(d) {return ['tan', d[2]]; }},
    {"name": "N$string$4", "symbols": [{"literal":"a"}, {"literal":"s"}, {"literal":"i"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N", "symbols": ["N$string$4", "_", "P"], "postprocess": function(d) {return ['asin', d[2]]; }},
    {"name": "N$string$5", "symbols": [{"literal":"a"}, {"literal":"c"}, {"literal":"o"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N", "symbols": ["N$string$5", "_", "P"], "postprocess": function(d) {return ['acos', d[2]]; }},
    {"name": "N$string$6", "symbols": [{"literal":"a"}, {"literal":"t"}, {"literal":"a"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N", "symbols": ["N$string$6", "_", "P"], "postprocess": function(d) {return ['atan', d[2]]; }},
    {"name": "N$string$7", "symbols": [{"literal":"p"}, {"literal":"i"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N", "symbols": ["N$string$7"], "postprocess": function(d) {return ['pi']; }},
    {"name": "N", "symbols": [{"literal":"e"}], "postprocess": function(d) {return ['e']; }},
    {"name": "N$string$8", "symbols": [{"literal":"s"}, {"literal":"q"}, {"literal":"r"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N", "symbols": ["N$string$8", "_", "P"], "postprocess": function(d) {return ['sqrt', d[2]]; }},
    {"name": "N$string$9", "symbols": [{"literal":"l"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N", "symbols": ["N$string$9", "_", "P"], "postprocess": function(d) {return ['log', d[2]]; }},
    {"name": "N$string$10", "symbols": [{"literal":"m"}, {"literal":"i"}, {"literal":"n"}, {"literal":"("}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N$subexpression$1$ebnf$1", "symbols": [/[0-9\,\s]/]},
    {"name": "N$subexpression$1$ebnf$1", "symbols": ["N$subexpression$1$ebnf$1", /[0-9\,\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "N$subexpression$1", "symbols": ["N$subexpression$1$ebnf$1"]},
    {"name": "N", "symbols": ["N$string$10", "_", "N$subexpression$1", "_", {"literal":")"}], "postprocess": function(d) {var params = d[2][0].join('').split(','); return ['min', params]; }},
    {"name": "N$string$11", "symbols": [{"literal":"m"}, {"literal":"a"}, {"literal":"x"}, {"literal":"("}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N$subexpression$2$ebnf$1", "symbols": [/[0-9\,\s]/]},
    {"name": "N$subexpression$2$ebnf$1", "symbols": ["N$subexpression$2$ebnf$1", /[0-9\,\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "N$subexpression$2", "symbols": ["N$subexpression$2$ebnf$1"]},
    {"name": "N", "symbols": ["N$string$11", "_", "N$subexpression$2", "_", {"literal":")"}], "postprocess": function(d) {var params = d[2][0].join('').split(','); return ['max', params]; }},
    {"name": "N$string$12", "symbols": [{"literal":"c"}, {"literal":"e"}, {"literal":"i"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N", "symbols": ["N$string$12", "_", "P"], "postprocess": function(d) {return ['ceil', d[2]]; }},
    {"name": "N$string$13", "symbols": [{"literal":"f"}, {"literal":"l"}, {"literal":"o"}, {"literal":"o"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N", "symbols": ["N$string$13", "_", "P"], "postprocess": function(d) {return ['floor', d[2]]; }},
    {"name": "N$string$14", "symbols": [{"literal":"r"}, {"literal":"o"}, {"literal":"u"}, {"literal":"n"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N", "symbols": ["N$string$14", "_", "P"], "postprocess": function(d) {return ['round', d[2]]; }},
    {"name": "N", "symbols": ["dataFeedMatch"], "postprocess":  function (d){
        var params = {};
                for(var i = 0; i < d[0][1].length; i++){
                	params[d[0][1][i][2][0]] = {};
                	params[d[0][1][i][2][0]]['operator'] = d[0][1][i][4][0];
                	params[d[0][1][i][2][0]]['value'] = d[0][1][i][6];
                }
        return ['datafeed', params]
        }
            },
    {"name": "N$subexpression$3$string$1", "symbols": [{"literal":"a"}, {"literal":"s"}, {"literal":"s"}, {"literal":"e"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N$subexpression$3", "symbols": ["N$subexpression$3$string$1"]},
    {"name": "N$subexpression$3$string$2", "symbols": [{"literal":"a"}, {"literal":"m"}, {"literal":"o"}, {"literal":"u"}, {"literal":"n"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N$subexpression$3", "symbols": ["N$subexpression$3$string$2"]},
    {"name": "N$subexpression$3$string$3", "symbols": [{"literal":"a"}, {"literal":"d"}, {"literal":"d"}, {"literal":"r"}, {"literal":"e"}, {"literal":"s"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "N$subexpression$3", "symbols": ["N$subexpression$3$string$3"]},
    {"name": "N", "symbols": ["inputAndOutputMatch", {"literal":"."}, "N$subexpression$3"], "postprocess":  function (d){
        var params = {};
                for(var i = 0; i < d[0][2].length; i++){
                	params[d[0][2][i][2][0]] = {};
                	params[d[0][2][i][2][0]]['operator'] = d[0][2][i][4][0];
                	params[d[0][2][i][2][0]]['value'] = d[0][2][i][6];
                }
        return [d[0][0][0], params, d[2][0]]
        }
            },
    {"name": "float", "symbols": ["int", {"literal":"."}, "int"], "postprocess": function(d) {return new BigNumber(d[0] + d[1] + d[2])}},
    {"name": "float", "symbols": ["int"], "postprocess": function(d) {return new BigNumber(d[0])}},
    {"name": "value", "symbols": ["AS"], "postprocess": id},
    {"name": "int$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "int$ebnf$1", "symbols": ["int$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "int", "symbols": ["int$ebnf$1"], "postprocess": function(d) {return d[0].join(""); }},
    {"name": "string$ebnf$1", "symbols": [/[\w\s]/]},
    {"name": "string$ebnf$1", "symbols": ["string$ebnf$1", /[\w\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "string", "symbols": [{"literal":"\""}, "string$ebnf$1", {"literal":"\""}], "postprocess": function(d) {return d[1].join("").trim(); }},
    {"name": "valueInDF$ebnf$1", "symbols": [/[\w\[\]\.\,\s\:]/]},
    {"name": "valueInDF$ebnf$1", "symbols": ["valueInDF$ebnf$1", /[\w\[\]\.\,\s\:]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "valueInDF", "symbols": [{"literal":"\""}, "valueInDF$ebnf$1", {"literal":"\""}], "postprocess": function(d) {return d[1].join("").trim(); }},
    {"name": "valueInIO$ebnf$1", "symbols": [/[\w ]/]},
    {"name": "valueInIO$ebnf$1", "symbols": ["valueInIO$ebnf$1", /[\w ]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "valueInIO", "symbols": ["valueInIO$ebnf$1"], "postprocess": function(d) {return d[0].join("").trim(); }},
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", /[\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": function(d) {return null; }}
]
  , ParserStart: "main"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
